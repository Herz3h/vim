global !p
from datetime import datetime
endglobal 
snippet var "@var"
/** @var ${1:Class} $${2:variable} */
endsnippet

snippet d "dump();"
dump($${1:variable});
endsnippet

snippet dd "dump();die;"
dump($${1:variable});
die;
endsnippet

snippet ife "if (cond) { ... } else { ... }"
if(${1})
{
	${0:${VISUAL}}
}
else
{
	${2}
}
endsnippet

snippet if "if (condition) { ... }"
if(${1})
{
	${0:${VISUAL}}
}
endsnippet

snippet eif "elseif(condition) { ... }"
elseif(${1})
{
	${0:${VISUAL}}
}
endsnippet

snippet try "try { ... } catch (Exception $e) { ... }"
try
{
	${0:${VISUAL}}
}
catch (${1:Exception} $e)
{
}
endsnippet


snippet migctn "migration container"
<?php

declare(strict_types=1);

namespace Application\Migrations;

use Doctrine\DBAL\Schema\Schema;
use Doctrine\Migrations\AbstractMigration;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\ContainerAwareInterface;
use Symfony\Component\DependencyInjection\ContainerAwareTrait;

/**
 * Auto-generated Migration: Please modify to your needs!
 */
final class Version`!p snip.rv = datetime.now().strftime('%Y%m%d%H%M%S')` extends AbstractMigration implements ContainerAwareInterface
{
    use ContainerAwareTrait;

    public function getDescription() : string
    {
        return '';
    }

    public function up(Schema $schema) : void
    {
        // this up() migration is auto-generated, please modify it to your needs
        $this->abortIf($this->connection->getDatabasePlatform()->getName() !== 'mysql', 'Migration can only be executed safely on \'mysql\'.');
    }

    public function down(Schema $schema) : void
    {
        // this down() migration is auto-generated, please modify it to your needs
        $this->abortIf($this->connection->getDatabasePlatform()->getName() !== 'mysql', 'Migration can only be executed safely on \'mysql\'.');
    }

    public function postUp(Schema $schema): void
    {
        /** @var EntityManagerInterface $em */
        $em = $this->container->get('doctrine.orm.entity_manager');
        $connection = $em->getConnection();

        $query = $connection->query("");
    }
}
endsnippet

